# https://companion.home-assistant.io/docs/notifications/notifications-basic/
https://code.jnf.me/jaywll/home-automation
## This will notify if any doors are open it requires the [sensor.door_count] **it won't allow you to arm the alarm until all windows are closed**
# base_url: !secret base_url


#   - alias: Open Doors Notification On Alarm Set
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: pending
#     condition:
#     - condition: numeric_state
#       above: '1'
#       entity_id: sensor.door_count
#     action:
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: There are still doors open maybe you should close them first.
#     - service: alarm_control_panel.alarm_disarm
#
# ## This will notify if any windows are open it requires the [sensor.window_count] **it won't allow you to arm the alarm until all windows are closed**
#
#   - alias: Open Windows Notification on Alarm Set
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: pending
#     condition:
#     - condition: numeric_state
#       above: '0'
#       entity_id: sensor.window_count
#     action:
#     - delay: 00:00:20
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: There are still windows open maybe you should close them first.
#     - service: alarm_control_panel.alarm_disarm
#
# ## This will use the Xiaomi Gateway to sound an alarm if the system has been triggered
#
#   - alias: Start Siren on Alarm Trigger
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: triggered
#     action:
#     - service: xiaomi_aqara.play_ringtone
#       data:
#         gw_mac: !secret xiaomimac
#         ringtone_id: 0
#         ringtone_vol: 80
#     - service: light.turn_on
#       entity_id: group.downstairs_lights
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: Alarm triggered you have 2 minutes to reset or police will be contacted!
#     - service: switch.turn_on
#       data:
#         entity_id: switch.away_alarm_triggered
#
# ## This will stop the siren once the correct alarm code has been entered
#
#   - alias: Stop Alarm Siren
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       from: triggered
#     action:
#     - service: xiaomi_aqara.stop_ringtone
#       data:
#         gw_mac: !secret xiaomimac
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: Alarm deactivated!
#     - service: switch.turn_on
#       data:
#         entity_id: switch.alarm_deactivated


automation:

## Create daily snapshot of hassio
  # - alias: Daily Backup at 3 AM
  #   trigger:
  #     platform: time
  #     at: '3:00:00'
  #   action:
  #   - service: hassio.snapshot_full
  #     data_template:
  #       name: Automated Backup {{ now().strftime('%Y-%m-%d') }}

## Upload snapshot to Dropbox
    - alias: Upload dropbox 4AM
      trigger:
        platform: time
        at: '4:00:00'
      action:
      - service: hassio.addon_stdin
        data_template:
          addon: 7be23ff5_dropbox_sync
          input: {"command":"upload"}



- id: someones_ringing_the_bell
  alias: Someone rang the doorbell
  trigger:
  - platform: state
    entity_id: binary_sensor.ring_front_door_ding
    to: 'on'
  action:
  - service: media_player.play_media
    data_template:
      entity_id: media_player.googlehome
      media_content_id: https://ha.markdavies.com/local/audio/labrador.mp3
      media_content_type: audio/mp3
  - service: notify.pushbullet
    data:
      message: "{{ now().strftime('%a - %H:%M') }}: *Someone Rang The Doorbell*\nSomeone at the door rang the bell."
  - service: notify.gmail
    data:
      title: Someone Rang the Doorbell
      message: Someone at the door rang the bell!
      
automation:
  - alias: 'Send Notification'
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          message: "Notification text"
          
          
notify:
  - name: ALL_DEVICES
    platform: group
    services:
      - service: mobile_app_iphone_one
      - service: mobile_app_iphone_two
      - service: mobile_app_ipad_one
      - service: mobile_app_pixel_4_xl
      
      
      
      
  automation:
    - alias: "Notify Mobile app group"
      trigger:
        ...
      action:
        - service: notify.ALL_DEVICES
          data:
            message: "Something happened at home!"
            
            
            
            
automation:
  - alias: "Send Notification with a link"
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          title: "Motion Detected in Backyard"
          message: "Someone might be in the backyard."
          data:
            # iOS URL
            url: "/lovelace/cameras"
            # Android URL
            clickAction: "/lovelace/cameras"
            
            
            
automation:
  - alias: "Notify of Motion click action"
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          title: "Motion Detected in Backyard"
          message: "Someone might be in the backyard."
          data:
            # iOS URL
            url: "https://google.com"
            # Android URL
            clickAction: "https://google.com"
            
            
name: "Bedroom Late Night"
entities:
  group.bedroom_shallow_accents:
    state: on
    brightness: 255
    profile: cool_blue_shallow
    transition: 15
  group.bedroom_deep_accents:
    state: on
    brightness: 255
    profile: cool_blue_deep
    transition: 15  
  group.bedroom_base:
    state: on
    brightness: 255
    rgb_color: [0, 35, 170]
    transition: 15  
    
    
alias: 'Auto Night Lights Bedroom'
trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_motion
    to: 'on'
condition:
  - condition: state
    entity_id: input_boolean.house_auto_lights
    state: 'on'
  - condition: state
    entity_id: group.bedroom_lights
    state: 'off'
  - condition: sun
    after: sunset
action:  
  - service: scene.turn_on
    entity_id: scene.bedroom_night_light
    
    
    
- alias: Turn Light and Occupation On
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "on"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "off"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "off"
  action:
    - service: switch.turn_on
      entity_id: switch.sonoff
    - service: input_boolean.turn_on
      entity_id: input_boolean.room_occupied

- alias: Turn Occupation Off
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "on"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "on"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.room_occupied

- alias: Turn Light Off
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "off"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "on"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "off"
  action:
    - service: switch.turn_off
      entity_id: switch.sonoff



alarm_control_panel:
  - platform: manual
    name: Alarm
    code: !secret alarm_control_panel_code
    # Don't require the code to arm the alarm
    code_arm_required: false
    # Arm again after triggering
    disarm_after_trigger: false
    # Delay from arming and becoming armed, eg. to leave the house.
    arming_time: 120
    # Allow time to disarm the alarm before it triggers, eg. when arriving home
    delay_time: 60
    # Amount of time the alarm is triggered for
    trigger_time: 600
    disarmed:
      # Ensure the alarm can never be directly triggered when disarmed
      trigger_time: 0
    armed_home:
      # Leave no delay between arming -> armed
      arming_time: 0
      # Leave no delay between pending -> triggered
      delay_time: 0
      
      
      
      
- alias: "Alarm - Trigger when sensors go off"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door
      to: "on"
    - platform: state
      entity_id: binary_sensor.garage_entry
      to: "on"
    # Add more triggers here for other doors/windows
  condition:
    # Only trigger the alarm if it's armed
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_home
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_away
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.alarm

- alias: "Alarm - Triggered"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "triggered"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.siren

- alias: "Alarm - Disarmed"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "disarmed"
  action:
    # Turn off the siren once the alarm is disarmed
    - service: homeassistant.turn_off
      entity_id: switch.siren
      
      
- alias: "Alarm - Pending"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      from: "armed_away" # No need for armed_home, there's no pending delay there.
      to: "pending"
  action:
    - delay: 00:00:05 # Small delay for "Announce" automation to run.
    - service: notify.alexa_media
      data:
        target:
          - media_player.kitchen
        data:
          type: announce
        message: "Please disarm the alarm"
    # Start a timer to repeat the warning
    - service: timer.start
      entity_id: timer.alarm_pending

- alias: "Alarm - Pending Repeat"
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.alarm_pending
  condition:
    condition: state
    entity_id: alarm_control_panel.alarm
    state: pending
  action:
    - service: notify.alexa_media
      data:
        target:
          - media_player.kitchen
        data:
          type: announce
        message: "Disarm the alarm now!"
    # Restart the timer
    - service: timer.start
      entity_id: timer.alarm_pending

- alias: "Alarm - Disarmed"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "disarmed"
  action:
    # Turn off the siren once the alarm is disarmed
    - service: homeassistant.turn_off
      entity_id: switch.siren
    # Stop the warning repeat timer
    - service: timer.cancel
      entity_id: timer.alarm_pending
The timer looks like this (directly in configuration.yaml).

timer:
  # Used to repeat notifications that the alarm needs to be disarmed
  alarm_pending:
    duration: "00:00:10"



notify:
  - name: ha_sendmail
    platform: smtp
#if mail is on gmail
    server: smtp.gmail.com
    port: 587
    timeout: 15
#from whom we send
    sender: user@gmail.com
    encryption: starttls
    username: user@gmail.com
    password: passwd
#to whom we send (you can use one box and send it to yourself, why not)
    recipient:
      - user@gmail.com
    sender_name: My Home Assistant
    
    
card_mod:
          style: |
            ha-card {
              --ha-card-background: rgba(238,238,224);
              --alarm-color-disarmed: var(--label-badge-green);
              --alarm-color-armed: rgba(255,0,0) ! important;
              --card-background-color: transparent;
              --ha-card-header-color: black;
              --alarm-color-triggered: rgba(255,0,0) ! important;
              --ha-label-badge-label-text-transform: capitalized;
              --mdc-button-outline-color: rgb(3,169,244);
              --label-badge-background-color: yellow;
              
            }
            .iron-input > input{ color:#000 ! important;
            }




# lovelace_gen

- title: Alarm
  icon: 'mdi:shield'
  path: alarm
  cards:
    - type: vertical-stack
      cards:
        - !include
          - '../templates/system_header.yaml'
          - name: "[[[ if (states['alarm_control_panel.alarm'].state == 'disarmed') return `The alarm is disarmed!`; else return `The alarm is armed!` ]]]"
            icon: mdi:alert #fal:sensor-alert
            content: Alarm
    - type: custom:layout-card
      cards:
        - type: custom:layout-card
          cards:
            - type: alarm-panel
              entity: alarm_control_panel.alarm
              states:
                - arm_home
                - arm_away
              {% raw %}
              style:
                .: |
                  ha-card {
                    overflow: hidden;
                    opacity: 0.7;
                  }
                '#armActions mwc-button':
                  $: |
                    button {
                      min-height: 50px;
                      font-size: 18px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                '#keypad mwc-button:nth-of-type(11)':
                  $: |
                    :host {
                      background: transparent;
                      float: left !important;
                    }
                     button {
                      display: block;
                      min-height: 50px;
                      font-size: 28px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      width: 50%;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                      #box-shadow: 0 0 60px 30px #fff, 0 0 100px 60px #f0f, 0 0 140px 90px #0ff;
                    }

                '#keypad mwc-button:nth-of-type(-n+9)':
                  $: |
                    :host {
                      background: transparent;
                      float: left !important;
                    }
                     button {
                      display: block;
                      min-height: 50px;
                      font-size: 28px !important;
                      --mdc-theme-primary: var(--primary-text-color); #var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      width: 50%;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                '#keypad mwc-button:nth-of-type(12)':
                  $: |
                    button {
                      min-height: 50px;
                      font-size: 18px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                {% endraw %}
                
                
                
 alias: 'Trigger alarm'
  trigger:
    - platform: state
      entity_id: sensor.side_door_access, sensor.front_door_access, sensor.back_door_access
      to: 'open'     
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha_alarm
        state: armed_away
      - condition: state
        entity_id: alarm_control_panel.ha_alarm
        state: armed_home        
  action:
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha_alarm
    - service: notify.pushover
      data_template:
        message: '{{ trigger.to_state.attributes.friendly_name }} opened'
      data:
        title: 'Alarm'



card_mod:
          style: |
            ha-card {
              --ha-card-background: rgba(238,238,224);
              --alarm-color-disarmed: rgb(13,160,53);
              --alarm-color-armed: rgba(255,0,0) ! important;
              --card-background-color: transparent;
              --ha-card-header-color: black;
              --alarm-color-triggered: rgba(255,0,0) ! important;
              --ha-label-badge-label-text-transform: capitalized;
              --mdc-button-outline-color: rgb(3,169,244);
              --primary-text-color: #000;
              --ha-label-badge: inherit ;
                position: absolute;
                right: 80px ! important;
                top: 20px ! important;
              
            }

- alias: L-ST Study Lights Off If No Person Present For 5 Min
  id: "1603640030052"
  description: ""
  trigger:
    - entity_id: binary_sensor.study_motion_sensor_motion
      platform: state
      from: "on"
      to: "off"
      for: 00:15:00
    - minutes: /5
      platform: time_pattern
  condition:
    - entity_id: binary_sensor.study_motion_sensor_motion
      condition: state
      state: "off"
      for: 00:15:00
  action:
    - service: light.turn_off
      entity_id: light.study_ceiling_light
    - service: light.turn_off
      entity_id: light.study_lamps
    - service: switch.turn_off
      entity_id: switch.study_screen_led
      
      
- alias: Turn TV lights to orange when watching Hockey
  trigger:
    platform: state
    entity_id: media_player.living_room_chromecast
    to: 'playing'
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: "{{ 'Flyers' in state_attr('media_player.living_room_chromecast', 'media_title') }}"
      - condition: template
        value_template: "{{ is_state_attr('media_player.living_room_chromecast', 'app_name', 'Chrome Mirroring') }}"
  action:
    - service: light.turn_on
      data:
        entity_id: light.living_room
        rgb_color: [255,137,32]
    - service: light.turn_on
      data:
        entity_id: light.living_room
        rgb_color: [255,137,32]

alias: Alarm - Flash en Sirene 01 - Aan
sequence:
  - data:
      duration: 60
      duty_cycle: 2
      ieee: '00:0d:6f:00:13:1a:xx:xx'
      intensity: 2
      level: 1
      mode: 1
      strobe: 1
    service: zha.warning_device_warn
mode: single
icon: 'mdi:volume-high'
Blockquote

ieee: use adress of the sirene
Options:
strobe: 1 (Strobe ON)
strobe: 0 (Strobe OFF)

mode: 1 (Sirene ON)
mode: 0 (Sirene OFF)

duration: time of the sirene / Strobe in seconds

alarm_control_panel: # This is the STANDARD control panel, without any kind of check before arming.
  - platform: manual
    name: Standard Alarm
    code: !secret alarm_code
    code_arm_required: false # Don't need code to arm the alarm

    # When alarm is triggered, sets the n. of seconds of alarm siren.
    trigger_time: 120

    disarmed:
      trigger_time: 0
    armed_home:
      delay_time: 0 # delay when arming (to exit the house)
      arming_time: 0 # delay when triggering (to disable the alarm after you come back)
    armed_away:
      delay_time: 20
      arming_time: 0
    armed_night:
      delay_time: 20
      arming_time: 0
  
  - platform: template
    panels:
      safe_alarm: # This is the SMART alarm that checks that doors are closed before arming. In lovelace I use this alarm panel.
        name: Antifurto

        value_template: "{{ states('alarm_control_panel.standard_alarm') }}"

        arm_home: #Day Alarm
          - choose:
            - conditions: # If doors are closed
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3
                state: 'off'
              sequence:
                - service: alarm_control_panel.alarm_arm_home # arm
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default:
              - service: notify.alexa_media # Else, Alexa says that some accesses are left open.
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        arm_night: #Night Alarm
          - choose:
            - conditions:
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3, binary_sensor.window1, binary_sensor.window2
                state: 'off'
              sequence: # Arm alarm if doors and windows selected are closed.
                - service: alarm_control_panel.alarm_arm_night
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default: # Else Alexa says that something is open and so alarm is not active
              - service: notify.alexa_media
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        arm_away: # Total Alarm
          - choose:
            - conditions:
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3, binary_sensor.window1, binary_sensor.window2
                state: 'off'
              sequence: # Alarm if everything is closed
                - service: alarm_control_panel.alarm_arm_away
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default: # Else Alexa says
              - service: notify.alexa_media
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        disarm:
          - condition: template
            value_template: "{{ code == '123123' }}" # Unfortunately it was - at the time I wrote the code - not possible to use secrets inside templates
          - service: alarm_control_panel.alarm_disarm
            data:
              entity_id: alarm_control_panel.standard_alarm
              code: !secret alarm_code

konnected: !include konnected.yaml # where I have declared sensors



automation:
  - id: alarm_arm_home_at_night
    alias: 'Alarm: Arm Home at night'
    description: 'Arms the alarm, and locks the doors'
    initial_state: 'on'
    condition:
      - condition: state
        entity_id: group.household
        state: 'home'
    trigger:
      platform: time
      at: '22:00:00'
    action:
      - service: alarm_control_panel.alarm_arm_night
        entity_id: alarm_control_panel.home_alarm
      - service: lock.lock
        entity_id: group.all_house_locks

  - id: alarm_arm_home_when_away
    alias: 'Alarm: Arm home when everyone is out'
    trigger:
      - entity_id: group.household
        platform: state
        from: 'home'
        to: 'away'
    action:
      - service: alarm_control_panel.alarm_arm_away
        entity_id: alarm_control_panel.home_alarm  
      - service: notify.admins
        data:
          message: Alarm has been set to away.
          title: 'Home Alarm'



animate: true
color_thresholds:
  - color: '#a55eea'
    value: -6.9
  - color: '#8854d0'
    value: -3.9
  - color: '#3867d6'
    value: -1.2
  - color: '#4b7bec'
    value: 1.6
  - color: '#2d98da'
    value: 4.3
  - color: '#45aaf2'
    value: 7.1
  - color: '#0fb9b1'
    value: 9.9
  - color: '#2bcbba'
    value: 12.7
  - color: '#20bf6b'
    value: 15.5
  - color: '#26de81'
    value: 18.2
  - color: '#fed330'
    value: 21
  - color: '#f7b731'
    value: 23.8
  - color: '#fd9644'
    value: 26.6
  - color: '#fa8231'
    value: 29.3
  - color: '#fc5c65'
    value: 32.1
  - color: '#eb3b5a'
    value: 35.9
entities:
  - entity: sensor.openweathermap_temperature
    index: 0
    name: Carport
    show_state: true
    state_adaptive_color: true
  - color: '#666666'
    entity: sensor.solar_elevation
    line_width: 1
    show_fill: false
    show_legend: false
    show_state: false
    y_axis: secondary
hour24: true
hours_to_show: 24
line_width: 2
lower_bound_secondary: ~0
name: Temperatur
points_per_hour: 12
show:
  extrema: true
  graph: line
  points: false
type: 'custom:mini-graph-card'


- id: '1588702585432'
  alias: Bathroom Light On-Off
  description: Controls bathroom light based on motion sensor
  trigger:
  - device_id: 235db833caa54d49bddcb05b0f04ba12
    domain: binary_sensor
    entity_id: binary_sensor.neo4
    platform: device
    type: motion
  condition: []
  action:
  - brightness_pct: 90
    device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_on
  - delay: 00:03:30
  - timeout: 00:00:00
    wait_template: '{{  is_state(''binary_sensor.neo4'', ''off'')  }}'
  - brightness_pct: 50
    device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_on
  - delay: 00:00:15
  - device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_off
  mode: restart
  
  input_boolean:
  infrared_device:
    name: My infrared device

switch:
  - platform: template
    switches:
      infrared_device:
        value_template: '{{ is_state("input_boolean.infrared_device", "on") }}'
        turn_on:
          - condition: state
            entity_id: input_boolean.infrared_device
            state: 'off'
          - service: input_boolean.toggle
            data:
              entity_id: input_boolean.infrared_device
          - service: send infrared command
        turn_off:
          - condition: state
            entity_id: input_boolean.infrared_device
            state: 'on'
          - service: input_boolean.toggle
            data:
              entity_id: input_boolean.infrared_device
          - service: send infrared command
                     
                     
                     
                     
                     
                     - card: 'media-control'
                        wider: true
                        widerSize: 2
                        noPadding: true
                        cardOptions:
                            entity: media_player.tv_living
                            name: Q90R
                            style: |
                              ha-card {
                                  padding: 2px !important;
                                  display: flex !important;
                                  flex-direction: column !important;
                                  background: transparent !important;
                                  box-shadow: none !important;
                                  border-radius:0 !important;
                              }       

                              .player {
                                  position: relative;
                                  padding: 5px;
                                  height: 100%;
                                  box-sizing: border-box;
                                  display: flex;
                                  flex-direction: column;
                                  justify-content: space-between;
                                  color: var(--text-primary-color);
                                  transition-property: color, padding;
                                  transition-duration: 0.4s;
                              }
    
    
    
    
    
    
automation:
   - alias 'link main light to lamp on'
     trigger:
        platform: state
        entity_id: light.lohasone
        to: 'on'
      action:
        service: light.turn_on
        entity_id: light.treelamp
   - alias 'link main light to lamp off'
     trigger:
        platform: state
        entity_id: light.lohasone
        to: 'unavailable'
      action:
        service: light.turn_off
        entity_id: light.treelamp
        
        
        
        
- alias: Scheduled Light
  trigger:
    - platform: time
      at:
        - '21:00:00'
        - '05:00:00'
    - platform: homeassistant
      event: start
  condition: "{{ 1 <= now().isoweekday() <= 5 }}"
  action:
    - service: "light.turn_{{ 'on' if now().hour >= 21 or now().hour < 5 else 'off' }}"
      target:
        entity_id: light.whatever




- alias: Turn light on and off at preset times
  trigger:
    - platform: time
      at: '21:00:00'
    - platform: time
      at: '05:00:00'
    - platform: homeassistant
      event: start
  action:
    - service_template: >
        {% set n = now() %}
        {% if n.hour >= 21 or n.hour < 5 %}
          light.turn_on
        {% else %}
          light.turn_off
        {% endif %}
      entity_id: light.my_light
