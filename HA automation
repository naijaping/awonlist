# https://companion.home-assistant.io/docs/notifications/notifications-basic/
https://code.jnf.me/jaywll/home-automation
## This will notify if any doors are open it requires the [sensor.door_count] **it won't allow you to arm the alarm until all windows are closed**
# base_url: !secret base_url


https://smarthomepursuits.com/how-to-arm-disarm-alarm-on-a-schedule-from-lovelace/


#   - alias: Open Doors Notification On Alarm Set
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: pending
#     condition:
#     - condition: numeric_state
#       above: '1'
#       entity_id: sensor.door_count
#     action:
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: There are still doors open maybe you should close them first.
#     - service: alarm_control_panel.alarm_disarm
#
# ## This will notify if any windows are open it requires the [sensor.window_count] **it won't allow you to arm the alarm until all windows are closed**
#
#   - alias: Open Windows Notification on Alarm Set
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: pending
#     condition:
#     - condition: numeric_state
#       above: '0'
#       entity_id: sensor.window_count
#     action:
#     - delay: 00:00:20
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: There are still windows open maybe you should close them first.
#     - service: alarm_control_panel.alarm_disarm
#
# ## This will use the Xiaomi Gateway to sound an alarm if the system has been triggered
#
#   - alias: Start Siren on Alarm Trigger
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       to: triggered
#     action:
#     - service: xiaomi_aqara.play_ringtone
#       data:
#         gw_mac: !secret xiaomimac
#         ringtone_id: 0
#         ringtone_vol: 80
#     - service: light.turn_on
#       entity_id: group.downstairs_lights
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: Alarm triggered you have 2 minutes to reset or police will be contacted!
#     - service: switch.turn_on
#       data:
#         entity_id: switch.away_alarm_triggered
#
# ## This will stop the siren once the correct alarm code has been entered
#
#   - alias: Stop Alarm Siren
#     trigger:
#     - platform: state
#       entity_id: alarm_control_panel.ha_alarm
#       from: triggered
#     action:
#     - service: xiaomi_aqara.stop_ringtone
#       data:
#         gw_mac: !secret xiaomimac
#     - service: tts.google_say
#       data:
#         entity_id: media_player.tts_kodi
#         message: Alarm deactivated!
#     - service: switch.turn_on
#       data:
#         entity_id: switch.alarm_deactivated


automation:

## Create daily snapshot of hassio
  # - alias: Daily Backup at 3 AM
  #   trigger:
  #     platform: time
  #     at: '3:00:00'
  #   action:
  #   - service: hassio.snapshot_full
  #     data_template:
  #       name: Automated Backup {{ now().strftime('%Y-%m-%d') }}

## Upload snapshot to Dropbox
    - alias: Upload dropbox 4AM
      trigger:
        platform: time
        at: '4:00:00'
      action:
      - service: hassio.addon_stdin
        data_template:
          addon: 7be23ff5_dropbox_sync
          input: {"command":"upload"}



- id: someones_ringing_the_bell
  alias: Someone rang the doorbell
  trigger:
  - platform: state
    entity_id: binary_sensor.ring_front_door_ding
    to: 'on'
  action:
  - service: media_player.play_media
    data_template:
      entity_id: media_player.googlehome
      media_content_id: https://ha.markdavies.com/local/audio/labrador.mp3
      media_content_type: audio/mp3
  - service: notify.pushbullet
    data:
      message: "{{ now().strftime('%a - %H:%M') }}: *Someone Rang The Doorbell*\nSomeone at the door rang the bell."
  - service: notify.gmail
    data:
      title: Someone Rang the Doorbell
      message: Someone at the door rang the bell!
      
automation:
  - alias: 'Send Notification'
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          message: "Notification text"
          
          
notify:
  - name: ALL_DEVICES
    platform: group
    services:
      - service: mobile_app_iphone_one
      - service: mobile_app_iphone_two
      - service: mobile_app_ipad_one
      - service: mobile_app_pixel_4_xl
      
      
      
sequence:
  - service: media_player.play_media
    target:
      entity_id: media_player.libreelec
    data:
      media_content_type: DIRECTORY
      media_content_id: special://profile/playlists/video/krtek.m3u
mode: single
            
            
            
automation:
  - alias: "Send Notification with a link"
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          title: "Motion Detected in Backyard"
          message: "Someone might be in the backyard."
          data:
            # iOS URL
            url: "/lovelace/cameras"
            # Android URL
            clickAction: "/lovelace/cameras"
            
            
            
automation:
  - alias: "Notify of Motion click action"
    trigger:
      ...
    action:
      - service: notify.mobile_app_<your_device_id_here>
        data:
          title: "Motion Detected in Backyard"
          message: "Someone might be in the backyard."
          data:
            # iOS URL
            url: "https://google.com"
            # Android URL
            clickAction: "https://google.com"
            
            
name: "Bedroom Late Night"
entities:
  group.bedroom_shallow_accents:
    state: on
    brightness: 255
    profile: cool_blue_shallow
    transition: 15
  group.bedroom_deep_accents:
    state: on
    brightness: 255
    profile: cool_blue_deep
    transition: 15  
  group.bedroom_base:
    state: on
    brightness: 255
    rgb_color: [0, 35, 170]
    transition: 15  
    
    
alias: 'Auto Night Lights Bedroom'
trigger:
  - platform: state
    entity_id: binary_sensor.bedroom_motion
    to: 'on'
condition:
  - condition: state
    entity_id: input_boolean.house_auto_lights
    state: 'on'
  - condition: state
    entity_id: group.bedroom_lights
    state: 'off'
  - condition: sun
    after: sunset
action:  
  - service: scene.turn_on
    entity_id: scene.bedroom_night_light
    
    
    
- alias: Turn Light and Occupation On
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "on"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "off"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "off"
  action:
    - service: switch.turn_on
      entity_id: switch.sonoff
    - service: input_boolean.turn_on
      entity_id: input_boolean.room_occupied

- alias: Turn Occupation Off
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "on"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "on"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.room_occupied

- alias: Turn Light Off
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.door
      to: "off"
  condition:
  	- condition: state
  	  entity_id: switch.sonoff
  	  state: "on"
  	- condition: state
  	  entity_id: input_boolean.room_occupied
  	  state: "off"
  action:
    - service: switch.turn_off
      entity_id: switch.sonoff



alarm_control_panel:
  - platform: manual
    name: Alarm
    code: !secret alarm_control_panel_code
    # Don't require the code to arm the alarm
    code_arm_required: false
    # Arm again after triggering
    disarm_after_trigger: false
    # Delay from arming and becoming armed, eg. to leave the house.
    arming_time: 120
    # Allow time to disarm the alarm before it triggers, eg. when arriving home
    delay_time: 60
    # Amount of time the alarm is triggered for
    trigger_time: 600
    disarmed:
      # Ensure the alarm can never be directly triggered when disarmed
      trigger_time: 0
    armed_home:
      # Leave no delay between arming -> armed
      arming_time: 0
      # Leave no delay between pending -> triggered
      delay_time: 0
      
      
      
      
- alias: "Alarm - Trigger when sensors go off"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door
      to: "on"
    - platform: state
      entity_id: binary_sensor.garage_entry
      to: "on"
    # Add more triggers here for other doors/windows
  condition:
    # Only trigger the alarm if it's armed
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_home
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_away
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.alarm

- alias: "Alarm - Triggered"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "triggered"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.siren

- alias: "Alarm - Disarmed"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "disarmed"
  action:
    # Turn off the siren once the alarm is disarmed
    - service: homeassistant.turn_off
      entity_id: switch.siren
      
      
- alias: "Alarm - Pending"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      from: "armed_away" # No need for armed_home, there's no pending delay there.
      to: "pending"
  action:
    - delay: 00:00:05 # Small delay for "Announce" automation to run.
    - service: notify.alexa_media
      data:
        target:
          - media_player.kitchen
        data:
          type: announce
        message: "Please disarm the alarm"
    # Start a timer to repeat the warning
    - service: timer.start
      entity_id: timer.alarm_pending

- alias: "Alarm - Pending Repeat"
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.alarm_pending
  condition:
    condition: state
    entity_id: alarm_control_panel.alarm
    state: pending
  action:
    - service: notify.alexa_media
      data:
        target:
          - media_player.kitchen
        data:
          type: announce
        message: "Disarm the alarm now!"
    # Restart the timer
    - service: timer.start
      entity_id: timer.alarm_pending

- alias: "Alarm - Disarmed"
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: "disarmed"
  action:
    # Turn off the siren once the alarm is disarmed
    - service: homeassistant.turn_off
      entity_id: switch.siren
    # Stop the warning repeat timer
    - service: timer.cancel
      entity_id: timer.alarm_pending
The timer looks like this (directly in configuration.yaml).

timer:
  # Used to repeat notifications that the alarm needs to be disarmed
  alarm_pending:
    duration: "00:00:10"



notify:
  - name: ha_sendmail
    platform: smtp
#if mail is on gmail
    server: smtp.gmail.com
    port: 587
    timeout: 15
#from whom we send
    sender: user@gmail.com
    encryption: starttls
    username: user@gmail.com
    password: passwd
#to whom we send (you can use one box and send it to yourself, why not)
    recipient:
      - user@gmail.com
    sender_name: My Home Assistant
    
    
card_mod:
          style: |
            ha-card {
              --ha-card-background: rgba(238,238,224);
              --alarm-color-disarmed: var(--label-badge-green);
              --alarm-color-armed: rgba(255,0,0) ! important;
              --card-background-color: transparent;
              --ha-card-header-color: black;
              --alarm-color-triggered: rgba(255,0,0) ! important;
              --ha-label-badge-label-text-transform: capitalized;
              --mdc-button-outline-color: rgb(3,169,244);
              --label-badge-background-color: yellow;
              
            }
            .iron-input > input{ color:#000 ! important;
            }




# lovelace_gen

- title: Alarm
  icon: 'mdi:shield'
  path: alarm
  cards:
    - type: vertical-stack
      cards:
        - !include
          - '../templates/system_header.yaml'
          - name: "[[[ if (states['alarm_control_panel.alarm'].state == 'disarmed') return `The alarm is disarmed!`; else return `The alarm is armed!` ]]]"
            icon: mdi:alert #fal:sensor-alert
            content: Alarm
    - type: custom:layout-card
      cards:
        - type: custom:layout-card
          cards:
            - type: alarm-panel
              entity: alarm_control_panel.alarm
              states:
                - arm_home
                - arm_away
              {% raw %}
              style:
                .: |
                  ha-card {
                    overflow: hidden;
                    opacity: 0.7;
                  }
                '#armActions mwc-button':
                  $: |
                    button {
                      min-height: 50px;
                      font-size: 18px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                '#keypad mwc-button:nth-of-type(11)':
                  $: |
                    :host {
                      background: transparent;
                      float: left !important;
                    }
                     button {
                      display: block;
                      min-height: 50px;
                      font-size: 28px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      width: 50%;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                      #box-shadow: 0 0 60px 30px #fff, 0 0 100px 60px #f0f, 0 0 140px 90px #0ff;
                    }

                '#keypad mwc-button:nth-of-type(-n+9)':
                  $: |
                    :host {
                      background: transparent;
                      float: left !important;
                    }
                     button {
                      display: block;
                      min-height: 50px;
                      font-size: 28px !important;
                      --mdc-theme-primary: var(--primary-text-color); #var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      width: 50%;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                '#keypad mwc-button:nth-of-type(12)':
                  $: |
                    button {
                      min-height: 50px;
                      font-size: 18px !important;
                      --mdc-theme-primary: var(--primary-text-color); var(--name-color-off);
                      border-color: rgba(57,128,228,0) !important;
                      border-radius: 12px;
                      box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.2), 0 0 20px 6px rgba(0, 0, 0, 0.19);
                    }
                {% endraw %}
                
                
                
 alias: 'Trigger alarm'
  trigger:
    - platform: state
      entity_id: sensor.side_door_access, sensor.front_door_access, sensor.back_door_access
      to: 'open'     
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.ha_alarm
        state: armed_away
      - condition: state
        entity_id: alarm_control_panel.ha_alarm
        state: armed_home        
  action:
    - service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.ha_alarm
    - service: notify.pushover
      data_template:
        message: '{{ trigger.to_state.attributes.friendly_name }} opened'
      data:
        title: 'Alarm'



card_mod:
          style: |
            ha-card {
              --ha-card-background: rgba(238,238,224);
              --alarm-color-disarmed: rgb(13,160,53);
              --alarm-color-armed: rgba(255,0,0) ! important;
              --card-background-color: transparent;
              --ha-card-header-color: black;
              --alarm-color-triggered: rgba(255,0,0) ! important;
              --ha-label-badge-label-text-transform: capitalized;
              --mdc-button-outline-color: rgb(3,169,244);
              --primary-text-color: #000;
              --ha-label-badge: inherit ;
                position: absolute;
                right: 80px ! important;
                top: 20px ! important;
              
            }

- alias: L-ST Study Lights Off If No Person Present For 5 Min
  id: "1603640030052"
  description: ""
  trigger:
    - entity_id: binary_sensor.study_motion_sensor_motion
      platform: state
      from: "on"
      to: "off"
      for: 00:15:00
    - minutes: /5
      platform: time_pattern
  condition:
    - entity_id: binary_sensor.study_motion_sensor_motion
      condition: state
      state: "off"
      for: 00:15:00
  action:
    - service: light.turn_off
      entity_id: light.study_ceiling_light
    - service: light.turn_off
      entity_id: light.study_lamps
    - service: switch.turn_off
      entity_id: switch.study_screen_led
      
      
- alias: Turn TV lights to orange when watching Hockey
  trigger:
    platform: state
    entity_id: media_player.living_room_chromecast
    to: 'playing'
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: "{{ 'Flyers' in state_attr('media_player.living_room_chromecast', 'media_title') }}"
      - condition: template
        value_template: "{{ is_state_attr('media_player.living_room_chromecast', 'app_name', 'Chrome Mirroring') }}"
  action:
    - service: light.turn_on
      data:
        entity_id: light.living_room
        rgb_color: [255,137,32]
    - service: light.turn_on
      data:
        entity_id: light.living_room
        rgb_color: [255,137,32]

alias: Alarm - Flash en Sirene 01 - Aan
sequence:
  - data:
      duration: 60
      duty_cycle: 2
      ieee: '00:0d:6f:00:13:1a:xx:xx'
      intensity: 2
      level: 1
      mode: 1
      strobe: 1
    service: zha.warning_device_warn
mode: single
icon: 'mdi:volume-high'
Blockquote

ieee: use adress of the sirene
Options:
strobe: 1 (Strobe ON)
strobe: 0 (Strobe OFF)

mode: 1 (Sirene ON)
mode: 0 (Sirene OFF)

duration: time of the sirene / Strobe in seconds

alarm_control_panel: # This is the STANDARD control panel, without any kind of check before arming.
  - platform: manual
    name: Standard Alarm
    code: !secret alarm_code
    code_arm_required: false # Don't need code to arm the alarm

    # When alarm is triggered, sets the n. of seconds of alarm siren.
    trigger_time: 120

    disarmed:
      trigger_time: 0
    armed_home:
      delay_time: 0 # delay when arming (to exit the house)
      arming_time: 0 # delay when triggering (to disable the alarm after you come back)
    armed_away:
      delay_time: 20
      arming_time: 0
    armed_night:
      delay_time: 20
      arming_time: 0
  
  - platform: template
    panels:
      safe_alarm: # This is the SMART alarm that checks that doors are closed before arming. In lovelace I use this alarm panel.
        name: Antifurto

        value_template: "{{ states('alarm_control_panel.standard_alarm') }}"

        arm_home: #Day Alarm
          - choose:
            - conditions: # If doors are closed
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3
                state: 'off'
              sequence:
                - service: alarm_control_panel.alarm_arm_home # arm
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default:
              - service: notify.alexa_media # Else, Alexa says that some accesses are left open.
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        arm_night: #Night Alarm
          - choose:
            - conditions:
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3, binary_sensor.window1, binary_sensor.window2
                state: 'off'
              sequence: # Arm alarm if doors and windows selected are closed.
                - service: alarm_control_panel.alarm_arm_night
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default: # Else Alexa says that something is open and so alarm is not active
              - service: notify.alexa_media
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        arm_away: # Total Alarm
          - choose:
            - conditions:
              - condition: state
                entity_id: binary_sensor.door1, binary_sensor.door2, binary_sensor.door3, binary_sensor.window1, binary_sensor.window2
                state: 'off'
              sequence: # Alarm if everything is closed
                - service: alarm_control_panel.alarm_arm_away
                  data:
                   entity_id: alarm_control_panel.standard_alarm
                   code: !secret alarm_code
            default: # Else Alexa says
              - service: notify.alexa_media
                data:
                  target: media_player.alexa
                  data:
                    type: announce
                    method: spoken
                  message: "Some doors are not closed. Alarm system not enabled."

        disarm:
          - condition: template
            value_template: "{{ code == '123123' }}" # Unfortunately it was - at the time I wrote the code - not possible to use secrets inside templates
          - service: alarm_control_panel.alarm_disarm
            data:
              entity_id: alarm_control_panel.standard_alarm
              code: !secret alarm_code

konnected: !include konnected.yaml # where I have declared sensors



automation:
  - id: alarm_arm_home_at_night
    alias: 'Alarm: Arm Home at night'
    description: 'Arms the alarm, and locks the doors'
    initial_state: 'on'
    condition:
      - condition: state
        entity_id: group.household
        state: 'home'
    trigger:
      platform: time
      at: '22:00:00'
    action:
      - service: alarm_control_panel.alarm_arm_night
        entity_id: alarm_control_panel.home_alarm
      - service: lock.lock
        entity_id: group.all_house_locks

  - id: alarm_arm_home_when_away
    alias: 'Alarm: Arm home when everyone is out'
    trigger:
      - entity_id: group.household
        platform: state
        from: 'home'
        to: 'away'
    action:
      - service: alarm_control_panel.alarm_arm_away
        entity_id: alarm_control_panel.home_alarm  
      - service: notify.admins
        data:
          message: Alarm has been set to away.
          title: 'Home Alarm'

- id: 'alarm_arm_home_when_away'
  alias: 'Alarm: Arm home when everyone is out'
  trigger:
  - entity_id: group.family
    platform: state
    from: 'home'
    to: 'away'
  action:
  - service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.home_alarm
  - service: notify.mobile_app_sm_888888
    data_template:
      message: 'Alarm set to away | {{now().strftime("%H:%M:%S")}}'
      title: ALERT !
      data:
        ttl: 0
        priority: high
  mode: single

animate: true
color_thresholds:
  - color: '#a55eea'
    value: -6.9
  - color: '#8854d0'
    value: -3.9
  - color: '#3867d6'
    value: -1.2
  - color: '#4b7bec'
    value: 1.6
  - color: '#2d98da'
    value: 4.3
  - color: '#45aaf2'
    value: 7.1
  - color: '#0fb9b1'
    value: 9.9
  - color: '#2bcbba'
    value: 12.7
  - color: '#20bf6b'
    value: 15.5
  - color: '#26de81'
    value: 18.2
  - color: '#fed330'
    value: 21
  - color: '#f7b731'
    value: 23.8
  - color: '#fd9644'
    value: 26.6
  - color: '#fa8231'
    value: 29.3
  - color: '#fc5c65'
    value: 32.1
  - color: '#eb3b5a'
    value: 35.9
entities:
  - entity: sensor.openweathermap_temperature
    index: 0
    name: Carport
    show_state: true
    state_adaptive_color: true
  - color: '#666666'
    entity: sensor.solar_elevation
    line_width: 1
    show_fill: false
    show_legend: false
    show_state: false
    y_axis: secondary
hour24: true
hours_to_show: 24
line_width: 2
lower_bound_secondary: ~0
name: Temperatur
points_per_hour: 12
show:
  extrema: true
  graph: line
  points: false
type: 'custom:mini-graph-card'


- id: '1588702585432'
  alias: Bathroom Light On-Off
  description: Controls bathroom light based on motion sensor
  trigger:
  - device_id: 235db833caa54d49bddcb05b0f04ba12
    domain: binary_sensor
    entity_id: binary_sensor.neo4
    platform: device
    type: motion
  condition: []
  action:
  - brightness_pct: 90
    device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_on
  - delay: 00:03:30
  - timeout: 00:00:00
    wait_template: '{{  is_state(''binary_sensor.neo4'', ''off'')  }}'
  - brightness_pct: 50
    device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_on
  - delay: 00:00:15
  - device_id: db52735c5e564774a9d7d19dd6d44e82
    domain: light
    entity_id: light.bathroom_light
    type: turn_off
  mode: restart
  
  input_boolean:
  infrared_device:
    name: My infrared device

switch:
  - platform: template
    switches:
      infrared_device:
        value_template: '{{ is_state("input_boolean.infrared_device", "on") }}'
        turn_on:
          - condition: state
            entity_id: input_boolean.infrared_device
            state: 'off'
          - service: input_boolean.toggle
            data:
              entity_id: input_boolean.infrared_device
          - service: send infrared command
        turn_off:
          - condition: state
            entity_id: input_boolean.infrared_device
            state: 'on'
          - service: input_boolean.toggle
            data:
              entity_id: input_boolean.infrared_device
          - service: send infrared command
                     
                     
                     
                     
                     
                     - card: 'media-control'
                        wider: true
                        widerSize: 2
                        noPadding: true
                        cardOptions:
                            entity: media_player.tv_living
                            name: Q90R
                            style: |
                              ha-card {
                                  padding: 2px !important;
                                  display: flex !important;
                                  flex-direction: column !important;
                                  background: transparent !important;
                                  box-shadow: none !important;
                                  border-radius:0 !important;
                              }       

                              .player {
                                  position: relative;
                                  padding: 5px;
                                  height: 100%;
                                  box-sizing: border-box;
                                  display: flex;
                                  flex-direction: column;
                                  justify-content: space-between;
                                  color: var(--text-primary-color);
                                  transition-property: color, padding;
                                  transition-duration: 0.4s;
                              }
    
    
    
    
    
    
automation:
   - alias 'link main light to lamp on'
     trigger:
        platform: state
        entity_id: light.lohasone
        to: 'on'
      action:
        service: light.turn_on
        entity_id: light.treelamp
   - alias 'link main light to lamp off'
     trigger:
        platform: state
        entity_id: light.lohasone
        to: 'unavailable'
      action:
        service: light.turn_off
        entity_id: light.treelamp
        
        
        
        
- alias: Scheduled Light
  trigger:
    - platform: time
      at:
        - '21:00:00'
        - '05:00:00'
    - platform: homeassistant
      event: start
  condition: "{{ 1 <= now().isoweekday() <= 5 }}"
  action:
    - service: "light.turn_{{ 'on' if now().hour >= 21 or now().hour < 5 else 'off' }}"
      target:
        entity_id: light.whatever




- alias: Turn light on and off at preset times
  trigger:
    - platform: time
      at: '21:00:00'
    - platform: time
      at: '05:00:00'
    - platform: homeassistant
      event: start
  action:
    - service_template: >
        {% set n = now() %}
        {% if n.hour >= 21 or n.hour < 5 %}
          light.turn_on
        {% else %}
          light.turn_off
        {% endif %}
      entity_id: light.my_light
      
      
      
  alias: Fan_Timer
  description: Turn ON/OFF fan
  trigger:
  - at: '20:30:00'
    platform: time
  - at: '01:30:00'
    platform: time
  - platform: homeassistant
    event: start
  condition: []
  action:
  - data:
      entity_id: switch.03200168dc4f22847b44
    service_template: >
      {% set n = now() %}
      {% if n.hour >= 20 or n.hour == 20 and n.minute >= 30 or
            n.hour < 1 or n.hour == 1 and n.minute < 30 %}
        switch.turn_on
      {% else %}
        switch.turn_off
      {% endif %}    

automation:
  - alias: 'Printer Ink Alert'
    id: 6ef2a695-0b76-4eb5-b67c-2ff6f74f40b8
    initial_state: 'on'
    trigger:
      - platform: numeric_state
        entity_id:
          - sensor.epson_xp_7100_series_black_ink
          - sensor.epson_xp_7100_series_cyan_ink
          - sensor.epson_xp_7100_series_magenta_ink
          - sensor.epson_xp_7100_series_yellow_ink
          - sensor.epson_xp_7100_series_photo_black_ink
        below: 15
    condition:
      condition: time
      weekday:
        - wed
    action:
      - service: persistent_notification.create
        data:
          title: Low Ink
          message: "{{ trigger.to_state.attributes.friendly_name }} is at {{ trigger.to_state.state }} "
          notification_id: low-battery-alert
      - service: script.notify_engine
        data:
          value1: "{{ trigger.to_state.attributes.friendly_name }} is at {{ trigger.to_state.state }} "
          who: 'carlo'
          apns_id: 'information'
      - service: script.tweet_engine_no_image
        data:
          tweet: 'Looks like my {{ trigger.to_state.attributes.friendly_name }} is LOW. @CCostan - Get me some more (https://amzn.to/2AnpFwD)'
          
          
          
          
### Building some interesting stats for tweeting. ###
  - platform: template
    sensors:
      sensor_count:
        friendly_name: 'Number of Sensors'
        value_template: >-
          {{ states.sensor | list | count }}
      automation_count:
        friendly_name: 'Number of Automations'
        value_template: >-
          {{ states.automation| list | count }}
      script_count:
        friendly_name: 'Number of Scripts'
        value_template: >
          {{ states.script | list | count }}
      binary_sensor_count:
        friendly_name: 'Number of Binary Sensors'
        value_template: >-
          {{ states.binary_sensor | list | count }}
      tracker_count:
        friendly_name: 'Number of Devices'
        value_template: >-
          {{ states.device_tracker| list | count }}
      lights_count:
        friendly_name: 'Number of Lights'
        value_template: >
          {{ states.light | list | count }}
      protect_count:
        friendly_name: 'Number of Smoke Detectors'
        value_template: >
          {% if states('group.protects') == 'on' %}
          {% for e in states.group.protects.attributes.entity_id if states(e) == 'on'  %}
          {% if loop.last %}
          {{ loop.index }}
          {% endif %}
          {%- endfor -%}
          {% else %}
          0
          {% endif %}
      camera_count:
        friendly_name: 'Number of online Cameras'
        value_template: >
          {{ states.camera | list | count }}


alias: Washing Machine Cycle finished
description: ''
trigger:
  - platform: numeric_state
    entity_id: sensor.washing_machine_power
    below: '5'
    for: '00:02:00'
condition: []
action:
  - service: notify.mobile_app_brian_iphone
    data:
      message: >-
        Alert! The washing machine has finished, please remove the clothes from
        the washing machine
      data:
        push:
          sound: Update.caf
  - service: script.scriptwashingmachinecomplete
mode: single


alias: ScriptWashingMachineComplete
sequence:
  - service: sonos.snapshot
    data:
      entity_id: media_player.living_room
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    target:
      entity_id: media_player.living_room
  - service: media_player.play_media
    target:
      entity_id: media_player.living_room
    data:
      media_content_type: music
      media_content_id: http://10.0.0.200/local/washing.mp3
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: sonos.restore
    data:
      entity_id: media_player.living_room
mode: single


- id: 'OMITTED'
  alias: Trigger Alarm When Home
  description: ''
  trigger:
  - entity_id: binary_sensor.back_door_sensor
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  action:
  - data: {}
    entity_id: alarm_control_panel.home_alarm
    service: alarm_control_panel.alarm_trigger
  - data: {}
    entity_id: switch.home_alarm
    service: switch.turn_on
    
    
    
  - platform: template
    sensors:
      is_house_active:
        friendly_name: "Is House Active"
        value_template: >
            {% set sensors = [states.binary_sensor.front_door_sensor, states.binary_sensor.back_door_sensor,  states.binary_sensor.playroom_motion_sensor, states.binary_sensor.living_room_motion_sensor, states.binary_sensor.kitchen_motion_sensor] %}
            {{ sensors | selectattr('state','eq','on') | list | count > 0 }}
            
            
Here auto arming automation:

- id: 'OMITTED'
  alias: Automatically Arm Alarm
  description: Arm the home alarm when it's past 10 pm and there's no activity detected
    in the house.
  trigger:
  - entity_id: binary_sensor.is_house_active
    for: 00:45:00
    platform: state
    to: 'off'
  condition:
  - after: '22:00:00'
    before: 07:00:00
    condition: time
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: disarmed
  action:
  - data:
      code: PUT_PIN_HERE
    entity_id: alarm_control_panel.home_alarm
    service: alarm_control_panel.alarm_arm_home
  mode: single            


repeat:
  while:
    - condition: state
      entity_id: input_boolean.kerstlampjes_loop
      state: 'on'
  sequence:
    - service: light.turn_on
      data:
        brightness_pct: '{{ (range(10, 100)|random|int) }}'
        xy_color:
          - '{{ (range(10, 90)|random|int)/100 }}'
          - '{{ (range(10, 90)|random|int)/100 }}'
      entity_id: light.kerstlampjes
    - delay: '0.5'



- id: hallway_Light_dim
    name: Hallway Light Dim
    entities:
        light.hallway_light:
            state: 'on'
            transition: 2
            brightness_pct: 20

  - id: hallway_Light_100_percent
    name: Hallway Light 100 pct
    entities:
        light.hallway_light:
            state: 'on'
            transition: 2
            brightness_pct: 100
            
            
            
            
    trigger:
      - platform:state
        entity_id: sensor.wirelesstag_lounge_temperature
    condition:
      condition: and
      conditions:
        - condition: numeric_state
          entity_id: sensor.wirelesstag_lounge_temperature
          above: 26
        - condition: state
          entity_id: fan.lounge_fan
          state: 'on'
        - condition: state
          entity_id: binary_sensor.people_home
          state: 'on'
    action:
      - service: fan.set_speed
        entity_id: fan.lounge_fan
        data_template:
          speed: >
            {% set temp = trigger.to_state.state | float %}
            {% if temp < 28 %} low
            {% elif temp < 30 %} medium
            {% else %} high
            {% endif %}            




####################################################
#          WINDOW OPEN STATUS      2021Apr02       #
####################################################
#https://community.home-assistant.io/t/automation-that-checks-for-is-doors-are-open-before-going-to-bed/59456/7
- id: "1793401787732"
  alias: "8 pm Window Check"
  description: 8 pm Window Check
  trigger:
    - at: "20:00:00"
      platform: time
  condition:
    condition: template
    value_template: >
      {{ states | selectattr('entity_id', 'in', state_attr('group.windows','entity_id')) | selectattr('state','in',['on','open']) | list | length >= 1 }}
  action:
    - service: media_player.volume_set
      data:
        volume_level: 0.8
      entity_id: media_player.everywhere
    - data:
        entity_id: group.echo
        media_content_id: amzn_sfx_trumpet_bugle_04
        media_content_type: sound
      service: media_player.play_media
    - data:
        data:
          method: speak
          type: announce
        message: >
          {% set open_windows = ( states | selectattr('entity_id', 'in', state_attr('group.windows','entity_id')) | selectattr('state','in',['on','open']) | list | map(attribute='name') | join(', ') ) %}
            It is 8 pm and the following windows are open: {{ open_windows }}
      service: notify.alexa_media_everywhere
    - service: notify.telegram_carlton
      data_template:
        title: "It's 8 PM Windows Open!"
        message: >
          {% set open_windows = ( states | selectattr('entity_id', 'in', state_attr('group.windows','entity_id')) | selectattr('state','in',['on','open']) | list | map(attribute='name') | join(', ') ) %}
            The following windows are open: {{ open_windows }}
  mode: single


- id: '1633120331664'
  alias: enter or leave zone
  description: ''
  trigger:
  - platform: zone
    entity_id: device_tracker.sm_a41500
    zone: zone.home
    event: enter
  - platform: zone
    entity_id: device_tracker.sm_a41500
    zone: zone.home
    event: leave
  condition: []
  action:
  - service: notify.mobile_app_sm_a41500
    data_template:
      message: >
        {% if (trigger.event) == "leave" %}
          {{ trigger.to_state.attributes.friendly_name }} left {{ trigger.zone.attributes.friendly_name }}
        {% else %}
          {{ trigger.to_state.attributes.friendly_name }} arrived at {{ trigger.zone.attributes.friendly_name }}
        {% endif %}
  mode: single





https://community.home-assistant.io/t/motion-lights-based-off-of-input-select-drop-down/348795/4
id: '1634785178928'
alias: Mode Motion Lights
description: ''
trigger:
  - type: motion
    platform: device
    device_id: 6817295ed58cb513e68d2d06ae1cba08
    entity_id: binary_sensor.master_bedroom_motion_ias_zone
    domain: binary_sensor
condition: []
action:
  - choose:
      - conditions:
          - condition: state
            entity_id: input_select.time_of_day
            state: Day
        sequence:
          - type: turn_on
            device_id: a2a5e56387907f0a71154aa9f8572a85
            entity_id: light.master_bathroom_light_3
            domain: light
            brightness_pct: 100
      - conditions:
          - condition: state
            entity_id: input_select.time_of_day
            state: Evening
        sequence:
          - type: turn_on
            device_id: a2a5e56387907f0a71154aa9f8572a85
            entity_id: light.master_bathroom_light_3
            domain: light
            brightness_pct: 20
    default: []
mode: single


https://community.home-assistant.io/t/simple-if-else-for-turning-on-different-light-state-day-night/347525/4
alias: Motion lights - Main bathroom
description: ''
variables:
  light: "light.main_bathroom_ceiling_light" 
trigger:
  - platform: state
    entity_id: binary_sensor.main_bathroom_motion_sensor_motion
    to: 'on'
  - platform: state
    entity_id: binary_sensor.main_bathroom_motion_sensor_motion
    to: 'off'
    for: '00:05:00'
condition: 
  - condition: template
    value_template: >
      {{ (trigger.to_state.state == 'on' and is_state(light, 'off')) or
         (trigger.to_state.state == 'off' and is_state(light, 'on')) }}
action:
  - choose:
      - conditions: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - variables:
              is_day: "{{ 7 <= now().hour < 20 }}"
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              transition: 3
              kelvin: "{{ 3400 if is_day else 2600 }}"
              brightness_pct: "{{ 100 if is_day else 25}}"
    default:
      - service: light.turn_off
        data:
          transition: 3
        target:
          entity_id: "{{ light }}"
mode: single


- id: '1555733330035'
  alias: Outside Lights On (10 mins) - Garage Door
  description: ''
  trigger:
  - platform: state
    entity_id: cover.garage_door
    from: closed
    to: opening
  condition:
  - condition: state
    entity_id: sun.sun
    state: below_horizon
  action:
  - variables:
      lights:
      - switch.barn_lights
      - switch.drive_lights
  - service: switch.turn_on
    target:
      entity_id: '{{ lights }}'
  - delay: '00:10:00'
  - service: switch.turn_off
    target:
      entity_id: '{{ lights }}'
  mode: single
  
  
- alias: 'Grandfather Clock'
  initial_state: true
  trigger:
    platform: time
    minutes: 00
    seconds: 00
  condition:
    condition: time
    after: '05:30:00'
    before: '22:30:00'
  action:
    - service: media_player.play_media
      data_template:
        entity_id: media_player.vlc_living_room
        media_content_id: '/home/pi/.homeassistant/www/sounds/GFChime/GrandFatherChime{{ now().strftime("%I") }}.wav'
        media_content_type: 'music'
