https://community.home-assistant.io/t/unable-to-play-local-mp3-to-google-home/44769/14
https://www.reddit.com/r/homeassistant/comments/pcyhkh/how_to_plan_an_mp3_song_on_a_google_home_speaker/

bwhgroup.co.uk  - cleaning - clean it up
https://www.cleantalk.co.uk/forums/upholstery-carpet-cleaning.6/
https://gitlab.shane.app/home-server/hass-config/-/blob/master/configuration/automations.yaml
https://www.redringtones.com/message-tones/page/21/
https://pictogrammers.github.io/@mdi/font/5.4.55/
https://github.com/mid1965/mark-homeassistant-config/tree/f788a3efc2d1774eb44d35dc367a498c8afd7e55/scenes
https://www.gstatic.com/cloud-site-ux/text_to_speech/text_to_speech.min.html
{{ as_timestamp(state_attr("calendar.xxxxxxxxxx", "start_time")) | timestamp_custom('%b %-d, %Y') }}


light.b888999gggttttttt888z:
  supported_features: 19
  brightness: 255
  color_temp: 153

{{ not is_state('weather.home', 'rainy') }}

condition: template
  value_template: "{{ (state_attr('device_tracker.iphone', 'battery_level')|int) > 50 }}"

- platform: trend
  sensors:
    shower_detected:
      friendly_name: Bathroom Shower Detected
      device_class: occupancy
      max_samples: 10
      entity_id: sensor.bathroom_humidity
      sample_duration: 60
      min_gradient: 0.15
      
      
      
type: 'custom:auto-entities'
card:
  type: entities
  title: Low Batteries
sort:
  method: state
filter:
  template: |
    {% for entity in states.sensor -%}
     {%- if ('battery' in entity.entity_id) and (state_attr(entity.entity_id, 'battery') != None) and (state_attr(entity.entity_id, "battery") | float <= states("input_number.low_battery_threshold") | float)-%}
      {{entity.entity_id}}
     {% endif %}
    {%- endfor %}



- platform: sql
  db_url: !secret db_url
  queries:
    - name: DB states
      query: 'SELECT round(count(*)/1024,1) AS cnt FROM states;'
      column: "cnt"
      unit_of_measurement: k
      
      
https://community.home-assistant.io/t/counting-open-doors-motion-sensors-solved-by-ranting-at-myself/47377/5      
- platform: template
    sensors:
      door_count:
        value_template: >-
           {{ states | selectattr('entity_id','in',state_attr('group.door_sensors','entity_id')) | selectattr('state','eq','on') | list | count | int}}
      window_count:
        value_template: >-
           {{ states | selectattr('entity_id','in',state_attr('group.window_sensors','entity_id')) | selectattr('state','eq','on') | list | count | int}}
           
           
           
 - platform: template
  sensors:
    door_count:
      value_template: >-
        {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'door') | list | count }}
    window_count:
      value_template: >-
        {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'window') | list | count }}
    motion_count:
      value_template: >-
        {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'motion') | list | count }}
        
        
        
# Doors and Windows Open

- platform: template
  sensors:
    door_count:
      value_template: >
        "{{ expand('group.doors_windows')|selectattr('state','eq','on')|list|count }}" 
        
        
        
              #----- Count Lights
      total_lights:
        friendly_name: 'Lights'
        icon_template: mdi:lightbulb
        value_template: "{{ states.light | list | length }}"

      #----- Count lights switched ON
      total_lights_on:
        friendly_name: 'Lights'
        unit_of_measurement: 'On'
        icon_template: mdi:lightbulb-on
        value_template: "{{ states.light | selectattr( 'state', 'eq', 'on') | list | length }}"





      - row: 4
        columns:
          - column: 1
            # tileOnRow: 4
            entities:
              - title: Test
                entities:
                  - card: custom:mini-graph-card
                    noPadding: true
                    wider: true
                    cardOptions:
                      entities:
                        - entity: sensor.tpl_clcolortemp
                          name: "Badkamer 1"
                      line_color: '#1427ff'
                      hold_action:
                        action: none
                      tap_action:
                        action: none
                  - card: gauge
                    wider: true
                    noPadding: true
                    cardOptions:
                      entity: sensor.tpl_clcolortemp
                      name: With Severity
                      unit: '%'
                      severity:
                        green: 0
                        yellow: 250
                        red: 450
                  - card: custom:dual-gauge-card
                    wider: true
                    higher: true
                    noPadding: true
                    cardOptions:
                      outer:
                        entity: sensor.tpl_clbrightness
                        label: "1"
                        min: 0
                        max: 255
                      inner:
                        entity: sensor.tpl_clcolortemp
                        label: "2"
                        min: 0
                        max: 500
                      colors:
                        - color: "var(--label-badge-yellow)"
                          value: 100
                        - color: "var(--label-badge-green)"
                          value: 150
                        - color: "var(--label-badge-blue)"
                          value: 300



sensor:
  - platform: "mqtt"
    state_topic: "zigbee2mqtt/xiaomi_cube"
    availability_topic: "zigbee2mqtt/bridge/state"
    value_template: "{{ value_json.action }}"
    
    
      - alias: Sonos bio PLAY when Cube FLIP 90
    trigger:
      - platform: mqtt
        topic: 'zigbee2mqtt/xiaomi_cube'
    condition:
      - condition: template
        value_template: '{{ "flip90" == trigger.payload_json.action or "flip180" == trigger.payload_json.action or "tap" == trigger.payload_json.action }}'
    action:
      - service: media_player.volume_set
        data:
          entity_id: media_player.bio
          volume_level: 0.15
      - service: media_player.select_source
        data_template:
          entity_id: media_player.bio
          source: '{{ states.input_select.select_radio_ihc_dag.state }}'
      - service: media_player.media_play
        data:
          entity_id: media_player.bio
          
          

          
 - platform: template
    sensors:
      ha_uptime:
        friendly_name: HA Uptime
        value_template: '{{ states.sensor.last_boot.state.split("T")[0] }}'         
          
          
        
   #todays date     
  - platform: template
    sensors:
      date_template:
        friendly_name: 'Date'
        value_template: '{{ as_timestamp(now()) | timestamp_custom("%d/%m/%y", True) }}'
        
        
- platform: template

sensors:

total_daily_energy_cost:

friendly_name: 'Total Power Cost - Daily'

value_template: "{{ '{:.2f}'.format((states('sensor.utility_meter _total_energy_daily')|float) * (states('input_number.electricity_energy_cost')|float)/100) }}"

unit_of_measurement: "Â£"




- platform: template
  sensors:
    sensor_count:
      friendly_name: 'Number of Sensors'
      value_template: >-
        {{ states.sensor | rejectattr('state', 'eq', 'unavailable') | list | count }}
    automation_count:
      friendly_name: 'Number of Automations'
      value_template: >-
        {{ states.automation| rejectattr('state', 'eq', 'unavailable') | list | count }}
    script_count:
      friendly_name: 'Number of Scripts'
      value_template: >-
        {{ states.script | rejectattr('state', 'eq', 'unavailable') | list | count }}
    binary_sensor_count:
      friendly_name: 'Number of Binary Sensors'
      value_template: >-
        {{ states.binary_sensor | rejectattr('state', 'eq', 'unavailable') | list | count }}
    tracker_count:
      friendly_name: 'Number of Devices'
      value_template: >-
        {{ states.device_tracker| rejectattr('state', 'eq', 'unavailable') | list | count }}
    lights_count:
      friendly_name: 'Number of Lights'
      value_template: >-
        {{ states.light | rejectattr('state', 'eq', 'unavailable') | list | count }}
    switches_count:
      friendly_name: 'Number of Switches'
      value_template: >-
        {{ states.switch | rejectattr('state', 'eq', 'unavailable') | list | count }}
    camera_count:
      friendly_name: 'Number of online Cameras'
      value_template: >-
        {{ states.camera | rejectattr('state', 'eq', 'unavailable') | list | count }}
    entities_count:
      friendly_name: 'Number of Entities'
      value_template: >-
        {{ states | rejectattr('state', 'eq', 'unavailable') | list | count}}
    hvac_action:
      friendly_name: 'HVAC Action'
      value_template: "{{states.climate.home.attributes.hvac_action}}"
    today_is:
      friendly_name: 'Today is'
      value_template: "{{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()] }}"
      
      
sensor:
  - platform: time_date
    display_options:
      - 'time'
  - platform: template
    sensors:
      timetoleavealexamin:
        friendly_name: Time to go Alexa min
        entity_id: sensor.time
        value_template: >-
          {% if states.calendar.calendar.attributes.start_time %}
            {{((as_timestamp(states.calendar.work.attributes.start_time) - as_timestamp(now())) / 60) | default(99) | int }}
          {%- else -%}
            0
          {%- endif %}
          
 automation event_in_120min:
  alias: Event in 120 minutes for Google Calendar
  trigger:
    platform: state
    entity_id: sensor.timetoleavealexamin
    to: '120'
    action:
        
        
        
- platform: template
    sensors:
      event_title:
        value_template: "{{ states.calendar.homecal.attributes.message }}"
        friendly_name: "Next Event"




- cal_id: !secret main_calender
  entities:
  - device_id: main_calender
    name: Main Calender
    track: true

- cal_id: en.usa#holiday@group.v.calendar.google.com
  entities:
  - device_id: holidays_in_united_states
    name: Holidays in United States
    track: true

- cal_id: addressbook#contacts@group.v.calendar.google.com
  entities:
  - device_id: address_book_contacts
    name: Address book Contacts
    track: true
    
    
    ######################## Holidays #########################################

  - platform: template
    sensors:
      next_holiday:
        friendly_name: "Next Holiday"
        value_template: "{{ states.calendar.holidays_in_united_states.attributes.message }}"

  - platform: template
    sensors:
      next_holiday_date_time:
        friendly_name: "Next Holiday"
        value_template: "{{ as_timestamp(states.calendar.holidays_in_united_states.attributes.start_time) | timestamp_custom('%D %-I:%M %P') }}"

  - platform: template
    sensors:
      days_to_next_holiday:
        friendly_name: "Days to Next Holiday"
        value_template: >-
              {% set year = states.sensor.date.state.split('-')[0] %}
              {% set month = states.sensor.date.state.split('-')[1] %}
              {% set date = states.sensor.date.state.split('-')[2] %}
              {%- set Month = states.calendar.holidays_in_united_states.attributes.start_time.split('-')[1] -%}
              {%- set DayDate = states.calendar.holidays_in_united_states.attributes.start_time.split('-')[2] -%}
              {%- set numOfDays = ((as_timestamp(strptime(year ~ '-' ~ Month ~ '-' ~ DayDate , '%Y-%m-%d')) | timestamp_custom('%j', true) | int ) - (as_timestamp(strptime(year ~ '-' ~ month~ '-' ~ date , '%Y-%m-%d')) | timestamp_custom('%j', true) | int)) -%}
              {%- if numOfDays < 0 -%}
                {{ numOfDays + 365 }}
              {%- else -%}
                {{ numOfDays }}
              {%- endif -%}
######################### Birthdays ####################################

  - platform: template
    sensors:
      next_birthday_date_time:
        friendly_name: "Next Birthday Date Time"
        value_template: "{{ as_timestamp(states.calendar.contacts.attributes.start_time) | timestamp_custom('%D %-I:%M %P') }}"

  - platform: template
    sensors:
      next_birthday:
        friendly_name: "Next Birthday"
        value_template: "{{ states.calendar.contacts.attributes.message }}"

  - platform: template
    sensors:
      days_to_next_birthday:
        friendly_name: "Days to Next Birthday"
        value_template: >-
              {% set year = states.sensor.date.state.split('-')[0] %}
              {% set month = states.sensor.date.state.split('-')[1] %}
              {% set date = states.sensor.date.state.split('-')[2] %}
              {%- set Month = states.calendar.contacts.attributes.start_time.split('-')[1] -%}
              {%- set DayDate = states.calendar.contacts.attributes.start_time.split('-')[2] -%}
              {%- set numOfDays = ((as_timestamp(strptime(year ~ '-' ~ Month ~ '-' ~ DayDate , '%Y-%m-%d')) | timestamp_custom('%j', true) | int ) - (as_timestamp(strptime(year ~ '-' ~ month~ '-' ~ date , '%Y-%m-%d')) | timestamp_custom('%j', true) | int)) -%}
              {%- if numOfDays < 0 -%}
                {{ numOfDays + 365 }}
              {%- else -%}
                {{ numOfDays }}
              {%- endif -%}
################# Appontments ####################################

  - platform: template
    sensors:
      next_appt_date_time:
        friendly_name: "Next Appt Date Time"
        value_template: "{{ as_timestamp(states.calendar.main_calender.attributes.start_time) | timestamp_custom('%D %-I:%M %P') }}"

  - platform: template
    sensors:
      next_appt_message:
        friendly_name: "Next Appt Type"
        value_template: "{{ states.calendar.main_calender.attributes.message }}"

  - platform: template
    sensors:
      next_appt_description:
        friendly_name: "Next Appt Description"
        value_template: "{{ states.calendar.main_calender.attributes.description }}"

  - platform: template
    sensors:
      days_to_next_appointment:
        friendly_name: "Days to Next Appointment"
        value_template: >-
              {% set year = states.sensor.date.state.split('-')[0] %}
              {% set month = states.sensor.date.state.split('-')[1] %}
              {% set date = states.sensor.date.state.split('-')[2] %}
              {%- set Month = states.calendar.main_calender.attributes.start_time.split('-')[1] -%}
              {%- set DayDate = states.calendar.main_calender.attributes.start_time.split('-')[2] -%}
              {%- set numOfDays = ((as_timestamp(strptime(year ~ '-' ~ Month ~ '-' ~ DayDate , '%Y-%m-%d')) | timestamp_custom('%j', true) | int ) - (as_timestamp(strptime(year ~ '-' ~ month~ '-' ~ date , '%Y-%m-%d')) | timestamp_custom('%j', true) | int)) -%}
              {%- if numOfDays < 0 -%}
                {{ numOfDays + 365 }}
              {%- else -%}
                {{ numOfDays }}
              {%- endif -%}
automation:

########################## Birthdays #######################################

  - alias: Birthday Countdown 30 Days
    initial_state: 'on'
    hide_entity: false
    trigger:
      - platform: state
        entity_id: input_boolean.boolean_home
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ states.sensor.days_to_next_birthday.state | int > 0 and states.sensor.days_to_next_birthday.state | int < 30 }}"
    action:
      - delay: '00:01:00'
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: 'BIRTHDAY COUNTDOWN {{states.sensor.next_birthday.state}} is {{states.sensor.days_to_next_birthday.state}} days away'

  - alias: Random Birthday Wishes
    initial_state: 'on'
    hide_entity: false
    trigger:
      platform: time_pattern
      hours: '/1'
      minutes: 3
      seconds: 00
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.boolean_home
          state: 'on'
        - condition: state
          entity_id: calendar.contacts
          state: 'on'
    action:
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: !include ../intent_templates/birthday_wishes.yaml

####### Holiday Announcment ################

  - alias: Holiday Countdown 7 Days
    initial_state: 'on'
    hide_entity: false
    trigger:
      - platform: state
        entity_id: input_boolean.boolean_home
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ states.sensor.days_to_next_holiday.state | int > 0 and states.sensor.days_to_next_holiday.state | int < 8 }}"
    action:
      - delay: '00:01:00'
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: 'Holiday COUNTDOWN {{states.sensor.next_holiday.state}} is {{states.sensor.days_to_next_holiday.state}} days away'

  - alias: Holiday
    initial_state: 'on'
    hide_entity: false
    trigger:
      platform: time_pattern
      hours: '/1'
      minutes: 3
      seconds: 00
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.boolean_home
          state: 'on'
        - condition: state
          entity_id: calendar.holidays_in_united_states
          state: 'on'
    action:
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: 'Today is {{ states.calendar.holidays_in_united_states.attributes.message }}'

##### appointment Announcment   ###################

  - alias: Dr Appointment Reminder 3 days
    initial_state: 'on'
    hide_entity: false
    trigger:
      - platform: state
        entity_id: input_boolean.boolean_home
        to: 'on'
    condition:
      - condition: template
        value_template: "{{ states.sensor.days_to_next_appointment.state | int > 0 and states.sensor.days_to_next_appointment.state | int < 4 }}"
      - condition: template
        value_template: "{{ states.sensor.days_to_next_appointment.state != 'Unknown' }}"
      - condition: template
        value_template: "{{ states.calendar.main_calender.attributes.description != 'None' }}"
    action:
      - delay: '00:01:15'
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: >-
            Appointment Reminder {{ states.calendar.main_calender.attributes.message }}
            with {{ states.calendar.main_calender.attributes.description }} is
            {{ states.sensor.days_to_next_appointment.state }} days away
      - service: notify.pushbullet
        data_template:
          message: >-
            Appointment Reminder {{ states.calendar.main_calender.attributes.message }}
            with {{ states.calendar.main_calender.attributes.description }} is
            {{states.sensor.days_to_next_appointment.state}} days away
      - service: notify.chrome_push
        data_template:
          title: "Appointment Reminder"
          message: >-
            Appointment Reminder {{ states.calendar.main_calender.attributes.message }}
            with {{ states.calendar.main_calender.attributes.description }} is
            {{states.sensor.days_to_next_appointment.state}} days away
  - alias: Dr Appontments
    initial_state: 'on'
    hide_entity: false
    trigger:
      platform: state
      entity_id: input_boolean.boolean_home
      to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.boolean_home
          state: 'on'
        # - condition: template
        #   value_template: "{{ states.sensor.days_to_next_appointment.state | int == 0 }}"
        # - condition: template
        #   value_template: "{{ states.calendar.main_calender.attributes is defined }}"
        - condition: template
          value_template: "{{ state_attr('calendar.main', 'description') != None }}"
        # - condition: template
        #   value_template: "{{ state_attr('calendar.main', 'start_time') != '' }}"
    action:
      - delay: '00:01:30'
      - service: tts.google_say
        data_template:
          entity_id: media_player.ha_speaker, media_player.master_bedroom_cast
          message: >-
            Dr appointment today {{ states.calendar.main_calender.attributes.description }}
            at {{ as_timestamp(states.calendar.main_calender.attributes.start_time) | timestamp_custom('%-I:%M %P') }}
      - service: notify.pushbullet
        data_template:
          message: >-
            Appointment Today {{ states.calendar.main_calender.attributes.message }}
            with {{ states.calendar.main_calender.attributes.description }}
            at {{ as_timestamp(states.calendar.main_calender.attributes.start_time) | timestamp_custom('%-I:%M %P') }}
      - service: notify.chrome_push
        data_template:
          title: "Appointment Reminder"
          message: >-
            Appointment Today {{ states.calendar.main_calender.attributes.message }}
            with {{ states.calendar.main_calender.attributes.description }} at
            {{ as_timestamp(states.calendar.main_calender.attributes.start_time) | timestamp_custom('%-I:%M %P') }}


sensor:
  - platform: time_date
    display_options:
      - 'time'
  - platform: template
    sensors:
      timetoleavealexamin:
        friendly_name: Time to go Alexa min
        entity_id: sensor.time
        value_template: >-
          {% if states.calendar.calendar.attributes.start_time %}
            {{((as_timestamp(states.calendar.work.attributes.start_time) - as_timestamp(now())) / 60) | default(99) | int }}
          {%- else -%}
            0
          {%- endif %}
          
          
          
          
          
- platform: template
sensors:

  calendar_house_milkman:
    friendly_name: 'Milkman'
    value_template: >
      {{ state_attr('calendar.house_milkman','message') }}
    attribute_templates:
      description: >-
        {{ state_attr('calendar.house_milkman','description') }}
      location: >-
        {{ state_attr('calendar.house_milkman','location') }}
      start_time: >-
        {{ state_attr('calendar.house_milkman','start_time') }}
      end_time: >-
        {{ state_attr('calendar.house_milkman','end_time') }}
    icon_template: mdi:truck
    
    
    
    platform: template
sensors:

  code_automations:
    friendly_name: 'Total Automations'
    value_template: >
      {{ states.automation | list | count }}
      
      
      
      platform: template
sensors:

  code_light:
    friendly_name: 'Total Lights'
    value_template: >
      {{ states.light | list | count }}
      
      
      
      - platform: "mqtt"
  name: hallway_pir_0
  state_topic: "zigbee2mqtt/hallway_pir_0"
  availability_topic: "zigbee2mqtt/bridge/state"
  payload_on: true
  payload_off: false
  value_template: "{{ value_json.occupancy }}"
  json_attributes_topic: "zigbee2mqtt/hallway_pir_0"


- id: '2894783210'
  alias: Welcome Home
  trigger:
  - entity_id: device_tracker.d7s8n32hf23
    from: not_home
    platform: state
    to: home
  condition: []
  action:
  - data:
      entity_id: media_player.bedroom_speaker
      message: Welcome Home Master!!
    service: tts.google_say
    
    
    
    
    
  - id: '139853231225565597'
  alias: Single automation to check for open door
  description: Check if the door is open and announce to Google Nest every 5 seconds until it closes.
  trigger:
    - platform: state
      entity_id: binary_sensor.top_stairs_open_closed
      to: 'on'
  condition:
    - condition: time
      before: '19:00:00'
      after: '07:00:00'
  mode: single
  action:
    - alias: Repeat the sequence UNTIL the conditions are true
      repeat:
        sequence:
          # Run this service until condition below is true (door closed = state of 'off')
          - service: tts.google_translate_say
            data:
              message: Basement door open.
            entity_id: media_player.kitchen_display, media_player.basement_speaker
          # Give it time to complete... 5 seconds.  This will have to be added via Yaml in the UI.
          - delay:
              milliseconds: 5000
        until:
          # Did it work?
          - condition: state
            entity_id: binary_sensor.top_stairs_open_closed
            state: 'off'



- action:
  - data:
      entity_id: media_player.bedroom_speaker
      volume_level: '0.9'
    service: media_player.volume_set
  - data:
      entity_id: media_player.bedroom_speaker
      media_content_id: https://xxxxxx.duckdns.org:8123/local/audio/door.mp3
      media_content_type: 'MUSIC'
    service: media_player.play_media
  - delay: '5'
  - data:
      entity_id: media_player.bedroom_speaker
      volume_level: '0.5'
    service: media_player.volume_set
  alias: Front Door Alert
  condition: []
  id: '1515147203854'
  trigger:
  - entity_id: sensor.bed_door
    from: closed
    platform: state
    to: open
    
    
  trigger:
  - entity_id: binary_sensor.sensor_3
    from: 'off'
    platform: state
    to: 'on'
    for: 
      hours: 0
      minutes: 2
      seconds: 0


morning_sequence:
    sequence:
      - service: media_player.volume_set
        data:
          entity_id: media_player.bedroom_speaker
          volume_level: 0.3
      - service: tts.google_say
        data_template:
          # entity_id: media_player.kitchen_audio
          entity_id: media_player.bedroom_speaker
          message: "Good morning Andreas and Judith. The time is {{ states.sensor.time.state }} and it's {{ states.sensor.date.state}}. Today the weather is {{ states.sensor.dark_sky_hourly_summary.state }}. There is a {{states.sensor.dark_sky_precip_probability.state | round(0) }} percent chance of {{states.sensor.dark_sky_precip.state}} today with an intensity of {{ states.sensor.dark_sky_precip_intensity.state | round(0) }} millimeters. The Temperature is {{ states.sensor.dark_sky_temperature.state | round(0) }} degrees but it will feel like {{ states.sensor.dark_sky_apparent_temperature.state | round(0) }}. The wind speed is {{ states.sensor.dark_sky_wind_speed.state | round(0) }} meters per second."
      - service: counter.increment
        entity_id: counter.morning_sequence_count





###############################################################################
# Celebrate Birthday!!!
###############################################################################

- alias: Today is the Birthday
  initial_state: true
  hide_entity: true
  trigger:
    platform: state
    entity_id:
      - input_label.lara_birthday_days2go
      - input_label.jack_birthday_days2go
      - input_label.mollie_birthday_days2go
      - input_label.kitten_birthday_days2go
  condition:
    - condition: state
      entity_id: group.all_devices
      state: 'home'
    - condition: time
      after: '18:00:00'
      before: '22:00:00'
    - condition: template
      value_template: "{{ trigger.to_state.state | int == 0 }}"
  action:
    - service: script.google_notify
      data_template:
        message: "Hurray! Today is {{ trigger.entity_id.split('.')[1].split('_')[0] | title }}'s Birthday!"


downstairs_colorloop:
  alias: Downstairs Color Loop
  sequence:
    - service: light.turn_on
      entity_id: group.downstairs_color_hue_lights
      data_template:
        hs_color:
          - "{{ range(360)|random }}"
          - "{{ range(80,101)|random }}"
        brightness_pct: 100
    - delay: '00:00:02'
    - service: light.turn_on
      entity_id: group.downstairs_color_hue_lights
      data_template:
        effect: colorloop
        brightness: 190
        transition: 5




- id: '1618962043007'
  alias: Check for open door
  description: Check if the door is open and announce every 5 seconds until it closes.
  trigger:
  - platform: state
    entity_id: binary_sensor.sonoff_door_window_sensor_contact
    to: 'on'
  condition:
  - condition: time
    before: '19:00:00'
    after: 07:00:00
  action:
  - repeat:
      sequence:
      - service: media_player.play_media
        target:
          device_id: 6cfa38e44981132ba3c4fa0f1287c2a3
        data:
          media_content_type: Music
          media_content_id: /local/audio/knocking-frontdoor.mp3
      - delay:
          milliseconds: 5000
      until:
      - condition: state
        entity_id: binary_sensor.sonoff_door_window_sensor_contact
        state: 'off'
  mode: single
  
  
  - id: '1605973279828'
  alias: Toilet - Sensor
  description: ''
  trigger:
  - type: motion
    platform: device
    device_id: db06330462a9c0236cf4942a2bf2f843
    entity_id: binary_sensor.toilet_sensor
    domain: binary_sensor
  condition:
  - condition: state
    entity_id: input_boolean.toilet_manual
    state: 'off'
  action:
  - choose:
    - conditions:
      - condition: time
        after: '23:00'
        before: 07:00
      sequence:
      - service: light.turn_on
        data:
          kelvin: 2262
          brightness_pct: 1
          transition: 2
        entity_id: light.toilet
    default:
    - service: light.turn_on
      data:
        kelvin: 2747
        brightness_pct: 100
        transition: 2
      entity_id: light.toilet
  mode: single
  
  
- id: '1598025836523'
  alias: 'Back Door open warning:  Alexa/Google'
  description: Alexa/Google voice message after back door has been open for more than
    7 minutes
  trigger:
  - entity_id: binary_sensor.kids_window
    platform: state
    to: 'on'
  action:
  - repeat:
      sequence:
      - data:
          volume_level: 0.7
        service: media_player.volume_set
        target:
          device_id: 6cfa38e44981132ba3c4
      - service: tts.amazon_polly_say
        data:
          entity_id: media_player.bedroom_speaker
          message: Bloody front door is open, please close it
      - data:
          volume_level: 0.5
        service: media_player.volume_set
        target:
          device_id: e0a934b2444d20859da3b4ce
      - service: tts.amazon_polly_say
        data:
          message: Bloody front door is open, please close it
          entity_id: media_player.fire_tv
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      until:
      - condition: state
        entity_id: binary_sensor.kids_window
        state: 'off'
  mode: single


#################################################
#             Alarm Auto Arm Away when LEAVE                       #
#################################################
- alias: 'Alarm Away when Leave home'
  trigger:
    platform: state
    entity_id: device_tracker.myphone
    from: 'home'
    to: 'not_home'
  action:
    service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.alarm
    data: 
      code: xxxx

#################################################
#          Alarm Auto DISARM when RETURN                         #
#################################################
- alias: 'Alarm disarm when return home'
  trigger:
    platform: state
    entity_id: device_tracker.myphone
    from: 'not_home'
    to: 'home'
  action:
    service: alarm_control_panel.alarm_disarm
    entity_id: alarm_control_panel.alarm
    data:
      code: xxxx


#################################
###Konnected Alarm Activations###
  - alias: 'Trigger alarm while armed away'
    trigger:
    - platform: state
      entity_id: binary_sensor.laundry_door
      to: 'open'
    - platform: state
      entity_id: binary_sensor.kitchen_1
      to: 'open'
    - platform: state
      entity_id: binary_sensor.kitchen_2
      to: 'open'
    - platform: state
      entity_id: binary_sensor.main_sliding_door
      to: 'open'
    - platform: state
      entity_id: binary_sensor.family_1
      to: 'open'
    - platform: state
      entity_id: binary_sensor.family_2
      to: 'open'
    - platform: state
      entity_id: binary_sensor.living_1
      to: 'open'
    - platform: state
      entity_id: binary_sensor.living_2
      to: 'open'
    - platform: state
      entity_id: binary_sensor.living_3
      to: 'open'
  condition:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: armed_home
    action:
      service: alarm_control_panel.alarm_trigger
      entity_id: alarm_control_panel.home_alarm
      
###################################
###Konnected Alarm Siren On###
  - alias: 'Activate siren when alarm triggered'
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'triggered'
    action:
      - service: switch.turn_on
        entity_id: switch.siren
        
############################
###Konnected Alarm Siren Off###
  - alias: 'Deactivate siren when alarm turned off'
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: 'disarmed'
    action:
      - service: switch.turn_off
        entity_id: switch.siren


alias: Alarm - Triggered
trigger:
  - platform: state
    entity_id: alarm_control_panel.home_alarm
    to: triggered
action:
  - service: media_player.play_media
    target:
      device_id: 32ba3c4fa0f1287c2a3
    data:
      media_content_id: 'https://xxxxxx/local/audio/labrador.mp3'
      media_content_type: audio/mp3
mode: single




Its nothing complicated, if you create a script and expose it to Google you can simply say âhey google, activate house alarmâ and the following script will run: house_alarm.yaml

Copy to clipboard
house_alarm:
  alias: House Alarm
#  alias: Turn house alarm ON in away mode after an exit delay (plus the usual alarm exit delay)
  sequence:
  - service: tts.google_say
    entity_id: media_player.kitchen
    data:
      message: 'Arming house alarm in one minute'
  - delay: '00:00:30'
  - service: alarm_control_panel.alarm_arm_away
    entity_id: alarm_control_panel.house



- id: '1620119770684'
  alias: Mobile alert front door closed
  description: alert door close
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door
    from: 'on'
    to: 'off'
  condition: []
  action:
  - service: notify.mobile_app_sm_123456789
    data_template:
      message: '{{ trigger.to_state.name }} Closed | {{now().strftime("%H:%M:%S")}}'
      title: ALERT !
      data:
        ttl: 0
        priority: high
  mode: single


binary_sensor:
- platform: template

sensors:

tv_state:

friendly_name: "LG B8 TV State"

value_template: >-

{{ state_attr('switch.tv_power', 'current_power_w')|float > 5 }}



# Notify on Device Offline
  - id: notify_on_device_offline
    alias: "Benachrichtigung bei GerÃ¤t offline"
    mode: parallel
    trigger:
      - platform: state
        entity_id:
          - sensor.battery_level_remote_light_livingroom
          - sensor.battery_level_remote_light_dressroom
          - sensor.battery_level_remote_light_bedroom
          - sensor.battery_level_remote_light_office
          - sensor.battery_level_remote_sabrina
          - sensor.battery_level_remote_dimitri
          - binary_sensor.motion_livingroom
          - binary_sensor.motion_dressroom
          - binary_sensor.motion_bedroom
          - binary_sensor.motion_office
          - sensor.temperature_bathroomsmall
          - sensor.temperature_livingroom
          - sensor.temperature_storageroom
          - sensor.lux_outside
          - sensor.lux_office
          - binary_sensor.door_bathroomlarge
          - binary_sensor.door_bathroomsmall
          - binary_sensor.door_office
          - binary_sensor.door_bedroom
          - binary_sensor.door_dressroom
          - binary_sensor.door_storageroom
          - binary_sensor.door_kitchen
          - binary_sensor.door_livingroom
          - binary_sensor.door_main
          - binary_sensor.window_bathroomlarge
          - binary_sensor.window_office
          - binary_sensor.window_dressroom
          - binary_sensor.window_bedroom
          - binary_sensor.window_kitchen
          - binary_sensor.window_livingroom
          - binary_sensor.water_leak_bathroomsmall
          - binary_sensor.water_leak_bathroomlarge
          - binary_sensor.water_leak_kitchen
          - binary_sensor.water_leak_storageroom
        to: "unavailable"
        for:
          minutes: 5
    action:
      - service: notify.mobile_app_phone_dimitri
        data:
          title: "Device offline!"
          message: >
            ðµ {{ state_attr(trigger.to_state.entity_id, 'friendly_name') }} is offline more than 5 minutes!
          data:
            channel: Notfall
            priority: high
            ttl: 0
            color: red




- alias: Weekly Backup Friday at 3 AM
  initial_state: 'on'
  trigger:
    platform: time
    at: 03:00:00
  condition:
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  action:
  - service: hassio.snapshot_full
    data_template:
      name: Automated Backup {{ now().strftime('%Y-%m-%d') }}
  - service: notify.hassnico_bot
    data_template:
      message: Creating backup named "Automated Backup {{ now().strftime('%Y-%m-%d') }}"
  id: d316d840e9fd4ebdbc748b2419853558

- alias: Weekly Backup to Google Friday at 3:30 AM
  initial_state: 'on'
  trigger:
    platform: time
    at: 03:30:00
  condition:
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  action:
  - service: rest_command.google_backup
  id: 4df385d2bced4f73adb6b7e872261e8f
  
  
alias: Turn off lights and music when nobody is home
mode: single
trigger:
  - platform: state
    entity_id: device_tracker.WIFE_s_phone
    to: 'not_home'
  - platform: state
    entity_id: device_tracker.MY_phone
    to: 'not_home'
condition:
  - condition: state
    entity_id: device_tracker.WIFE_s_phone
    state: 'not_home'
  - condition: state
    entity_id: device_tracker.MY_phone
    state: 'not_home'
action:
  - service: homeassistant.turn_off
    entity_id: group.all_music
  - service: homeassistant.turn_off
    entity_id: group.all_lights
    
    
    
    
    
    
alias: Light on when front door opens
description: >-
  Turn on a living room overhead light when the front door opens and it's an
  hour before sunset. 
trigger:
  - platform: state
    entity_id: binary_sensor.front_door_sensor_ias_zone
    from: closed
    to: open
condition: []
action:
  - service: light.turn_on
    target:
      device_id: 5330775d86bb7e5e59810b9267277c4b
    data:
      kelvin: 3400
      brightness_pct: 40
mode: single



# script.rainbow_light
alias: rainbow light
mode: single

fields:
  entity:
    description: The entity that will be rainbowed
    example: light.bathroom

variables:
  colors: |-
    {{ [[0.217,0.077], [0.157,0.05], [0.136,0.04], [0.137,0.065],
        [0.141,0.137], [0.146,0.238], [0.151,0.343], [0.157,0.457],
        [0.164,0.591], [0.17,0.703], [0.172,0.747], [0.199,0.724],
        [0.269,0.665], [0.36,0.588], [0.444,0.517], [0.527,0.447],
        [0.612,0.374], [0.677,0.319], [0.701,0.299], [0.667,0.284],
        [0.581,0.245], [0.477,0.196], [0.385,0.155], [0.301,0.116], 
        [0.217,0.077]] }}

sequence:
  - service: light.turn_on
    data_template:
      xy_color: |
        {{  colors[(now().second/2.5)|round(0)] }}
      transition: 1
      entity_id: '{{ entity }}'
      
      
      
# automation.rainbow_strip_led
alias: Rainbow strip led
description: Rotating color every second
trigger:
  - hours: '*'
    minutes: '*'
    platform: time_pattern
    seconds: /1
condition: []
action:
  - service: script.rainbow_light
    data:
      entity: light.strip_led
mode: single

zigbee_led_colorloop:
  alias: Zigbee Led ColorLoop
  sequence:
  - service: light.turn_on
    data:
      entity_id: light.zigbee_led_strip
      effect: colorloop
      brightness: 254
      transition: 5
  mode: single

https://gist.github.com/dglaude/619a9e415e1e34019a6b1f5f274e0d14


template:
  - binary_sensor:
      - name: Lights Left On While No One Home
        unique_id: lights_left_on_while_no_one_home
        state: >-
          {% set person_a_away = not is_state('person.a','home') %}
          {% set person_b_away = not is_state('person.b','home') %}
          {% set lights_still_on =
            states.light
            |selectattr('state','eq','on')
            |list
            |count > 1 %}
          {{ person_a_away and person_b_away and lights_still_on }}
        attributes:
          lights_left_on: >-
            {{
              states.light
              |selectattr('state','eq','on')
              |map(attribute='name')
              |join(", ")
            }}
          total_lights_left_on: >-
            {{
              states.light
              |selectattr('state','eq','on')
              |list()|count()
            }}

localtuya:
  - host: 192.168.1.x
    device_id: xxxxx
    local_key: xxxxx
    friendly_name: Tuya Device
    protocol_version: "3.3"
    entities:
      - platform: light
        friendly_name: Device Light
        id: 4 # Usually 1 or 20
        color_mode: 21 # Optional, usually 2 or 21, default: "none"
        brightness: 22 # Optional, usually 3 or 22, default: "none"
        color_temp: 23 # Optional, usually 4 or 23, default: "none"
        color: 24 # Optional, usually 5 (RGB_HSV) or 24 (HSV), default: "none"
        brightness_lower: 29 # Optional, usually 0 or 29, default: 29
        brightness_upper: 1000 # Optional, usually 255 or 1000, default: 1000
        color_temp_min_kelvin: 2700 # Optional, default: 2700
        color_temp_max_kelvin: 6500 # Optional, default: 6500
        scene: 25 # Optional, usually 6 (RGB_HSV) or 25 (HSV), default: "none"
        music_mode: False # Optional, some use internal mic, others, phone mic. Only internal mic is supported, default: "False"



#https://community.home-assistant.io/t/set-time-of-a-light-to-turn-on-and-off/335567/5
alias: Scheduled Lights
trigger:
  - platform: template
    value_template: "{{ now().hour == 21 and now().isoweekday() in [3, 5, 6] }}"
    id: 'on'
  - platform: template
    value_template: "{{ (now().hour, now().minute) == (2,30) and now().isoweekday() in [4, 6, 7] }}"
    id: 'off'
action:
  - service: "switch.turn_{{ trigger.id }}"
    target:
      entity_id: switch.upstairs_light_inside


- alias: Alarm - Remote Arm
  id: alarm_-_remote_arm
  initial_state: true
  trigger:
    - platform: event
      event_type: button_pressed
      event_data:
        entity_id: switch.kerui_remote_lock
  action:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.alarm
      data:
        code: !secret alarm_code

- alias: Alarm - Remote Disarm
  id: alarm_-_remote_disarm
  initial_state: true
  trigger:
    - platform: event
      event_type: button_pressed
      event_data:
        entity_id: switch.kerui_remote_unlock
  action:
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.alarm
      data:
        code: !secret alarm_code




- id: fan_auto_off_on
  alias: Bedroom fan auto on off
  trigger:
    - platform: numeric_state
      entity_id: sensor.main_bedroom_temperature
      above: 18
    - platform: numeric_state
      entity_id: sensor.main_bedroom_temperature
      below: 16
  action:
    service: >
      {% if states('sensor.main_bedroom_temperature')|int > 18 %}
        switch.turn_on
      {% elif states('sensor.main_bedroom_temperature')|int < 16 %}  
        switch.turn_off
      {% endif %}
    entity_id: switch.bedroom_fan
    
    
    
    alias: Door still open inform xxx1
description: ''
trigger:
  - platform: zone
    entity_id: person.xxx1
    zone: zone.home_adress
    event: leave
    id: device_tracker.iphone_2
condition:
  - condition: state
    entity_id: person.xxx2
    state: not_home
  - condition: state
    entity_id: group.all_doors
    state: 'on'
action:
  - device_id: xxx1
    domain: mobile_app
    type: notify
    message: "Attention! The following doors are open: {{ expand('group.all_doors') | selectattr('state','eq','on') | map(attribute='name') | list | join(', ') }}"
    title: ''
    data:
      push:
        sound: Alert_Voicemail_Haptic.caf
mode: single


       message: >
      {% if expand('group.all_doors') | selectattr('state','eq','on') | list | count == 1 %}
        Attention! The following door is open: {{ expand('group.all_doors') | selectattr('state','eq','on') | map(attribute='name') | list | join(', ') }}
      {% else %}
        Attention! The following doors are open: {{ expand('group.all_doors') | selectattr('state','eq','on') | map(attribute='name') | list | join(', ') }}
      {% endif %}



- id: '1634102183865'
  alias: Action - Switch - Schedule - Lucy Tank
  description: ''
  trigger:
  - platform: sun
    event: sunrise
    id: 'on'
  - platform: sun
    event: sunset
    id: 'off'
  condition: []
  action:
  - service: "switch.turn_{{ trigger.id }}"
    target:
      entity_id: switch.lucy_tank
  mode: single
  
  
  
  
- id: '1634102183865'
  alias: Action - Switch - Schedule - Lucy Tank
  description: ''
  trigger:
    - platform: state
      entity_id: sun.sun
  condition: []
  action:
    - service: "switch.turn_{{ 'on' if trigger.to_state.state == 'above_horizon' else 'off' }}"
      entity_id: switch.lucy_tank
  mode: single


- id: '1634283945613'
  alias: AAAA
  description: ''
  trigger:
  - platform: time
    id: 'on'
    at: '09:45'
  - platform: time
    id: 'off'
    at: '10:00'
  condition: []
  action:
  - service: "light.turn_{{ trigger.id }}"
    target:
      entity_id: light.test_lamp
  mode: single


id: "schedule_bedroom_lamp"
alias: Schedule Bedroom Lamp
trigger:
  - platform: time
    at:
      - "19:10:00"
      - "08:30:00"
  - platform: homeassistant
    event: start
condition: "{{ 1 <= now().isoweekday() <= 7 }}"
action:
  - variables:
      t: "({{ now().hour }},{{ now().minute  }})"
  - service: "light.turn_{{ 'on' if t >= (19,10) or t < (8,30) else 'off' }}"
    target:
      entity_id: light.test_lamp


alias: Show Door Camera on Attic Echo
description: ''
trigger:
  - platform: state
    entity_id: binary_sensor.front_doorbell_button_state
    to: 'on'
condition: []
action:
  - service: media_player.play_media
    data:
      entity_id: media_player.attic_echo_spot
      media_content_id: show front door phone
      media_content_type: custom
mode: single
